// automatically generated by the FlatBuffers compiler, do not modify

package messages

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Game struct {
	_tab flatbuffers.Table
}

func GetRootAsGame(buf []byte, offset flatbuffers.UOffsetT) *Game {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Game{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Game) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Game) Board(obj *Row, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Game) BoardLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Game) NextPlayer() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Game) MutateNextPlayer(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func GameStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GameAddBoard(builder *flatbuffers.Builder, Board flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Board), 0)
}
func GameStartBoardVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GameAddNextPlayer(builder *flatbuffers.Builder, NextPlayer int8) {
	builder.PrependInt8Slot(1, NextPlayer, 0)
}
func GameEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
