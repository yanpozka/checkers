// automatically generated by the FlatBuffers compiler, do not modify

package messages

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Move struct {
	_tab flatbuffers.Table
}

func GetRootAsMove(buf []byte, offset flatbuffers.UOffsetT) *Move {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Move{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Move) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Move) Position(obj *Coord) *Coord {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Coord)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Move) Player() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MoveStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MoveAddPosition(builder *flatbuffers.Builder, Position flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(Position), 0)
}
func MoveAddPlayer(builder *flatbuffers.Builder, Player flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Player), 0)
}
func MoveEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
